--Free Running Lanes Solution
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CollectionService = game:GetService("CollectionService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer


local c_tbl = {
	[1] = ReplicatedStorage.ChildAdded,
	[2] = ReplicatedStorage.ChildRemoved,
}

local function GetService(ServiceName: string)
	return game:GetService(ServiceName)
end

local func = c_tbl[choice]
if(func) then
	func()
else 
	print("Commons Not Found")
end

local ServicesMetatable = {}
function ServicesMetatable:__index(Index)
	local Success, Object = pcall(GetService, Index)
	local Service = Success and Object
	self[Index] = Service
	return Service
end

local Services = setmetatable({}, ServicesMetatable)
local GetObjectFromPathMetatable = {}
function GetObjectFromPathMetatable:__index(Path: string)
	local CurrentObject = nil
	for Index, PathValue in ipairs(string.split(Path, ".")) do
		if Index == 1 then
			local Service = Services[PathValue]
			if not Service then
				self[Path] = nil
				return nil
			end
			
			CurrentObject = Service
		else
			if CurrentObject then
				local Object = CurrentObject:FindFirstChild(PathValue)
				if Object then
					CurrentObject = Object
				end
			end
		end
	end
	
	self[Path] = CurrentObject
	return CurrentObject
end

local root = script.Parent

--local telegroup = root.telegroup
local genlock = function(linda, key, N)
	N = N or 1
	if linda:set(key) == cancel_error or linda:limit(key, N) == cancel_error then
		return cancel_error
	end
	
	return (N == 1) and 
		function(M, mode_)
			local timeout = (mode_ == "try") and 0 or nil
			if M > 0 then
				return linda:send(timeout, key, true)
			else
				local k = linda:receive(nil, key)
				return k and ((k ~= cancel_error) and true or k) or false
			end
		end
		or 
		function(M, mode_)
			local timeout = (mode_ == "try") and 0 or nil
			if M > 0 then
			return linda:send(timeout, key, trues(M))
		else
			local k = linda:receive(nil, linda.batched, key, -M)
			return k and ((k ~= cancel_error) and true or k) or false
		end
	end
end

--local keyslots = root.keyslots

local keysInOrder = {
	keyslots.slots.Red,
	keyslots.slots.Green,
	keyslots.slots.Blue,
}

local isOpen = false
