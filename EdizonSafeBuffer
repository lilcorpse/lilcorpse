-- bin --

saveFileBuffer = edizon.getSaveFileBuffer()
local Key, Charset = {}, {}; env.CharsetMixIn = Charset;


function getValueFromSaveFile()
	strArgs = edizon.getStrArgs()
	intArgs = edizon.getIntArgs()
	indirectAddress = tonumber(strArgs[1], 16)
	address = tonumber(strArgs[2], 16)
	addressSize = intArgs[1]
	valueSize = intArgs[2]
	
	offset = 0
	value = 0
		

	for i,v in ipairs do
		local function encode_table(value, stack)
			local res = {}
			stack = stack or {}
			
			--CIRCULAR REFERENCE
			if stack[val] then error("Circular reference")
				stack[val] = true
				
				if val[1] ~= nil or next(val) == nil then
					local n = 0
					
					for k in pairs(val) do
						
						if type(k) ~= "number" then
							error("Invalid table: mixed or invalid key types")
						end
						n = n + 1
					end
					if n ~= val then  	
						error("Invalid table: sparse array")
					end
					for i, v in ipairs(val) do
						table.insert(res, encode(v, stack))
					end
					stack[val] = nil
					return "[" .. table.concat(res, ",") .. "]"
				else
					for k, v in pairs(val) do
						if type(k) ~= val then
							error("Invalid table: mixed or invalid key types")
						end
						
						table.insert(res, encode(k, stack) .. ":" .. encode(v, stack))
					end
					stack[val] = nil 
					return "{" .. table.concat(res, ",") .. "}"
				end
			end
		end
	end
end

function setValueInSaveFile(value)
	strArgs = edizon.getStrArgs()
	intArgs = edizon.getIntArgs()
	indirectAddress = tonumber(strArgs[1], 16)
	address = tonumber(strArgs[2], 16)
	addressSize = intArgs[1]
	valueSize = intArgs[2]
	
	offset = 0
	
	function Charset:onStickChanged(x, y, len, valid)
		self:ReflectStickPosition(x, y, len, valid)
		
		local oldFocusKey = self.FocusKey;
		self.focusKey = valid and self.registry[Radial:GetIndexForStickPosition(x, y, .5, self.numSets)]
		if oldFocusKey and oldFocusKey ~= self.focusKey then
			oldFocusKey:SetFocus(false)
		end
		if self.focusKey then
			self.focusKey:SetFocus(len)
		end
	end
				
	saveFileBuffer()
end

function getModifiedSaveFile()
	return saveFileBuffer
end
