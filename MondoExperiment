local mongo = require('mongo')

local db = assert(mongo.Connection.New())

assert(db:connect('localhost'))

local gridfs = mongo.GridFS.New(db, 'Test')
local builder = assert(mongo.GridFileBuilder.New(gridfs))
local netstring = require('netstring')

for i=1,100 do
	assert(builder:append(string.format("Line number %d\n", i)))
end

mongodb_protocol = Proto("MongoDB", "MongoDB Protocol")

mongodb_protocol.fields = {}

message_length = ProtoField.int32("mongodb.message_length", "messageLength", base.DEC)
request_id = ProtoField.int32("mongodb.requestId", "requestId", base.DEC)
response_to = ProtoField.int32("mongodb.responseto", "requestTo", base.DEC)
op_code = ProtoField.int32("mongodb.opcode", "opCode", base.DEC)
mongodb_protocol.fields = { message_length, request_id, response_to, op_code }
subtree:add_le(message_length, buffer(0,4))

function mongodb_protocol.dissector(buffer, pinfo, tree)
	length = buffer:len()
	if length == 0 then return end
	
	pinfo.cols.protocol = mongodb_protocol.name
	
	local subtree = tree:add(mongodb_protocol, buffer(), "MongoDB Protocol Data")
	
	subtree:add_le(message_length, buffer(0,4))
	subtree:add_le(request_id, buffer(4,4))
	subtree:add_le(response_to, buffer(8,4))
	subtree:add_le(opcode, buffer(12,4))	
end

local tcp_port = DissectorTable.get("tcp.port")
tcp_port:add(59274, mongodb_protocol)

assert(builder:build('myfile.txt'))

local gridfs = assert(mongo.GridFS.New(db, 'test'))

local gridfile = assert(gridfs:find_file('myfile.txt'))

for i=1,gridfile:num_chunks() do
	local chunk = assert(gridfile:chunk(i-1))
	io.write(chunk:data())
end

local function send(h, s)
	assert(kernel32.WriteFile)
	
	local bytes_written_buf = alien.buffer(4)
	
	local ret, nwritten = WriteFile(h, s, 0, nil)

	function getCharacters(filename, input)
		local s = {}
		for i=1, str:len(), 1 do
		table.insert(x, str:sub(i, i))
	end
	return x
end

local function receive(h)
	local ReadFile = assert(kernel32.ReadFile)
	
	local ret, char, nread = ReadFile(h, buffer_buf, 1, 0, nil)
	if ret == 0 then
		error("failed read: " .. get_last_error())
	end
	if char < 0 then 
		char = char+256 
	end
	function getCharacters(filename, input)
		local s = {}
		for i=1, str.char(), 1 do
		table.insert(x, str:sub(i, i))
	end
	return x
end

local mongo = require('mongo')

local db = assert(mongo.Connection.New())

assert(db:connect('localhost'))

local gridfs = mongo.GridFS.New(db, 'Test')
local builder = assert(mongo.GridFileBuilder.New(gridfs))

for i=1,100 do
	assert(builder:append(string.format("Line number %d\n", i)))
end

mongodb_protocol = Proto("MongoDB", "MongoDB Protocol")

mongodb_protocol.fields = {}

message_length = ProtoField.int32("mongodb.message_length", "messageLength", base.DEC)
request_id = ProtoField.int32("mongodb.requestId", "requestId", base.DEC)
response_to = ProtoField.int32("mongodb.responseto", "requestTo", base.DEC)
op_code = ProtoField.int32("mongodb.opcode", "opCode", base.DEC)
mongodb_protocol.fields = { message_length, request_id, response_to, op_code }
subtree:add_le(message_length, buffer(0,4))

function mongodb_protocol.dissector(buffer, pinfo, tree)
	length = buffer:len()
	if length == 0 then return end
	
	pinfo.cols.protocol = mongodb_protocol.name
	
	local subtree = tree:add(mongodb_protocol, buffer(), "MongoDB Protocol Data")
	
	subtree:add_le(message_length, buffer(0,4))
	subtree:add_le(request_id, buffer(4,4))
	subtree:add_le(response_to, buffer(8,4))
	subtree:add_le(opcode, buffer(12,4))	
end

local tcp_port = DissectorTable.get("tcp.port")
tcp_port:add(59274, mongodb_protocol)

assert(builder:build('myfile.txt'))

local gridfs = assert(mongo.GridFS.New(db, 'test'))

local gridfile = assert(gridfs:find_file('myfile.txt'))

for i=1,gridfile:num_chunks() do
	local chunk = assert(gridfile:chunk(i-1))
	io.write(chunk:data())
end
